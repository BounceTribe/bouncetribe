input AddToArtistInfluenceInfluenceInput {
  artistArtistId: ID!
  influencesInfluenceId: ID!
  clientMutationId: String!
}

type AddToArtistInfluencePayload {
  viewer: Viewer!
  clientMutationId: String!
  influencesInfluence: Influence
  artistArtist: Artist
  influencesInfluenceEdge: InfluenceEdge
  artistArtistEdge: ArtistEdge
}

type AddToFriendsPayload {
  viewer: Viewer!
  clientMutationId: String!
  friends2User: User
  friends1User: User
  friends2UserEdge: UserEdge
  friends1UserEdge: UserEdge
}

input AddToFriendsUserInput {
  friends1UserId: ID!
  friends2UserId: ID!
  clientMutationId: String!
}

input AddToProjectArtProjectInput {
  artworkFileId: ID!
  projectProjectId: ID!
  clientMutationId: String!
}

type AddToUserInfluencesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  influencesInfluence: Influence
  userUserEdge: UserEdge
  influencesInfluenceEdge: InfluenceEdge
}

input AddToUserInfluencesUserInput {
  influencesInfluenceId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type AddToUserInvitationsPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipientUser: User
  invitationsFriendRequest: FriendRequest
  recipientUserEdge: UserEdge
  invitationsFriendRequestEdge: FriendRequestEdge
}

input AddToUserInvitationsUserInput {
  invitationsFriendRequestId: ID!
  recipientUserId: ID!
  clientMutationId: String!
}

type AddToUserProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  creatorUser: User
  projectsProject: Project
  creatorUserEdge: UserEdge
  projectsProjectEdge: ProjectEdge
}

input AddToUserProjectsUserInput {
  projectsProjectId: ID!
  creatorUserId: ID!
  clientMutationId: String!
}

type AddToUserRequestsPayload {
  viewer: Viewer!
  clientMutationId: String!
  actorUser: User
  sentrequestsFriendRequest: FriendRequest
  actorUserEdge: UserEdge
  sentrequestsFriendRequestEdge: FriendRequestEdge
}

input AddToUserRequestsUserInput {
  sentrequestsFriendRequestId: ID!
  actorUserId: ID!
  clientMutationId: String!
}

type Artist implements Node {
  createdAt: DateTime
  id: ID!
  imageUrl: String!
  influences(filter: InfluenceFilter, orderBy: InfluenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): InfluenceConnection
  name: String!
  spotifyId: String!
  updatedAt: DateTime
}

# A connection to a list of items.
type ArtistConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ArtistEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type ArtistEdge {
  # The item at the end of the edge.
  node: Artist!

  # A cursor for use in pagination.
  cursor: String!
}

input ArtistFilter {
  AND: [ArtistFilter!]
  OR: [ArtistFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  imageUrl: String
  imageUrl_not: String
  imageUrl_in: [String!]
  imageUrl_not_in: [String!]
  imageUrl_lt: String
  imageUrl_lte: String
  imageUrl_gt: String
  imageUrl_gte: String
  imageUrl_contains: String
  imageUrl_not_contains: String
  imageUrl_starts_with: String
  imageUrl_not_starts_with: String
  imageUrl_ends_with: String
  imageUrl_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  spotifyId: String
  spotifyId_not: String
  spotifyId_in: [String!]
  spotifyId_not_in: [String!]
  spotifyId_lt: String
  spotifyId_lte: String
  spotifyId_gt: String
  spotifyId_gte: String
  spotifyId_contains: String
  spotifyId_not_contains: String
  spotifyId_starts_with: String
  spotifyId_not_starts_with: String
  spotifyId_ends_with: String
  spotifyId_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

enum ArtistOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  imageUrl_ASC
  imageUrl_DESC
  name_ASC
  name_DESC
  spotifyId_ASC
  spotifyId_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input AUTH_PROVIDER_AUTH0 {
  # Is returned when calling any of the Auth0 functions which invoke
  # authentication. This includes calls to the Lock widget, to the auth0.js
  # library, or the libraries for other languages. See
  # https://auth0.com/docs/tokens/id_token for more detail
  idToken: String!
}

input AuthProviderSignupData {
  auth0: AUTH_PROVIDER_AUTH0
}

# The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
scalar BigDecimal

# The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
scalar BigInt

input CreateArtistInput {
  imageUrl: String!
  name: String!
  spotifyId: String!
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  clientMutationId: String!
}

type CreateArtistPayload {
  viewer: Viewer!
  clientMutationId: String!
  artist: Artist
  edge: ArtistEdge
}

input CreateFileInput {
  name: String!
  projectId: ID
  project: FileprojectProject
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  project: Project
}

input CreateFriendRequestInput {
  accepted: Boolean
  ignored: Boolean
  actorId: ID
  actor: FriendRequestactorUser
  recipientId: ID
  recipient: FriendRequestrecipientUser
  clientMutationId: String!
}

type CreateFriendRequestPayload {
  viewer: Viewer!
  clientMutationId: String!
  friendRequest: FriendRequest
  edge: FriendRequestEdge
  actor: User
  recipient: User
}

input CreateInfluenceInput {
  artistId: ID
  artist: InfluenceartistArtist
  userId: ID
  user: InfluenceuserUser
  clientMutationId: String!
}

type CreateInfluencePayload {
  viewer: Viewer!
  clientMutationId: String!
  influence: Influence
  edge: InfluenceEdge
  artist: Artist
  user: User
}

input CreateProjectInput {
  description: String
  genre: [PROJECT_GENRE!]
  new: Boolean
  privacy: PROJECT_PRIVACY
  title: String!
  artworkId: ID
  artwork: ProjectartworkFile
  creatorId: ID
  creator: ProjectcreatorUser
  clientMutationId: String!
}

type CreateProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  artwork: File
  creator: User
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

scalar DateTime

input DeleteArtistInput {
  id: ID!
  clientMutationId: String!
}

type DeleteArtistPayload {
  viewer: Viewer!
  clientMutationId: String!
  artist: Artist
  edge: ArtistEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  project: Project
  deletedId: ID
}

input DeleteFriendRequestInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFriendRequestPayload {
  viewer: Viewer!
  clientMutationId: String!
  friendRequest: FriendRequest
  edge: FriendRequestEdge
  actor: User
  recipient: User
  deletedId: ID
}

input DeleteInfluenceInput {
  id: ID!
  clientMutationId: String!
}

type DeleteInfluencePayload {
  viewer: Viewer!
  clientMutationId: String!
  influence: Influence
  edge: InfluenceEdge
  artist: Artist
  user: User
  deletedId: ID
}

input DeleteProjectInput {
  id: ID!
  clientMutationId: String!
}

type DeleteProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  artwork: File
  creator: User
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime
  id: ID!
  name: String!
  project(filter: ProjectFilter): Project
  secret: String!
  size: Int!
  updatedAt: DateTime
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  AND: [FileFilter!]
  OR: [FileFilter!]
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

input FileprojectProject {
  description: String
  genre: [PROJECT_GENRE!]
  new: Boolean
  privacy: PROJECT_PRIVACY
  title: String!
  creatorId: ID
  creator: ProjectcreatorUser
}

type FriendRequest implements Node {
  accepted: Boolean!
  actor(filter: UserFilter): User
  createdAt: DateTime
  id: ID!
  ignored: Boolean!
  recipient(filter: UserFilter): User
  updatedAt: DateTime
}

input FriendRequestactorUser {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
}

# A connection to a list of items.
type FriendRequestConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FriendRequestEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FriendRequestEdge {
  # The item at the end of the edge.
  node: FriendRequest!

  # A cursor for use in pagination.
  cursor: String!
}

input FriendRequestFilter {
  AND: [FriendRequestFilter!]
  OR: [FriendRequestFilter!]
  accepted: Boolean
  accepted_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ignored: Boolean
  ignored_not: Boolean
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

input FriendRequestInput {
  accepted: Boolean
  ignored: Boolean
  actorId: ID
  recipientId: ID
}

enum FriendRequestOrderBy {
  accepted_ASC
  accepted_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  ignored_ASC
  ignored_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input FriendRequestrecipientUser {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
}

type Influence implements Node {
  artist(filter: ArtistFilter): Artist
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  user(filter: UserFilter): User
}

input InfluenceartistArtist {
  imageUrl: String!
  name: String!
  spotifyId: String!
  influencesIds: [ID!]
  influences: [InfluenceInput!]
}

# A connection to a list of items.
type InfluenceConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [InfluenceEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type InfluenceEdge {
  # The item at the end of the edge.
  node: Influence!

  # A cursor for use in pagination.
  cursor: String!
}

input InfluenceFilter {
  AND: [InfluenceFilter!]
  OR: [InfluenceFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

input InfluenceInput {
  artistId: ID
  userId: ID
}

enum InfluenceOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input InfluenceuserUser {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
}

# The `Long` scalar type represents non-fractional signed whole numeric values.
# Long can represent values between -(2^63) and 2^63 - 1.
scalar Long

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createInfluence(input: CreateInfluenceInput!): CreateInfluencePayload
  createFriendRequest(input: CreateFriendRequestInput!): CreateFriendRequestPayload
  createArtist(input: CreateArtistInput!): CreateArtistPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  updateInfluence(input: UpdateInfluenceInput!): UpdateInfluencePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateFriendRequest(input: UpdateFriendRequestInput!): UpdateFriendRequestPayload
  updateArtist(input: UpdateArtistInput!): UpdateArtistPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  deleteInfluence(input: DeleteInfluenceInput!): DeleteInfluencePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  deleteFriendRequest(input: DeleteFriendRequestInput!): DeleteFriendRequestPayload
  deleteArtist(input: DeleteArtistInput!): DeleteArtistPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  setProjectArt(input: AddToProjectArtProjectInput!): SetProjectArtPayload
  unsetProjectArt(input: UnsetProjectArtProjectInput!): UnsetProjectArtPayload
  addToUserInfluences(input: AddToUserInfluencesUserInput!): AddToUserInfluencesPayload
  addToFriends(input: AddToFriendsUserInput!): AddToFriendsPayload
  addToArtistInfluence(input: AddToArtistInfluenceInfluenceInput!): AddToArtistInfluencePayload
  addToUserInvitations(input: AddToUserInvitationsUserInput!): AddToUserInvitationsPayload
  addToUserProjects(input: AddToUserProjectsUserInput!): AddToUserProjectsPayload
  addToUserRequests(input: AddToUserRequestsUserInput!): AddToUserRequestsPayload
  removeFromUserInfluences(input: RemoveFromUserInfluencesUserInput!): RemoveFromUserInfluencesPayload
  removeFromFriends(input: RemoveFromFriendsUserInput!): RemoveFromFriendsPayload
  removeFromArtistInfluence(input: RemoveFromArtistInfluenceInfluenceInput!): RemoveFromArtistInfluencePayload
  removeFromUserInvitations(input: RemoveFromUserInvitationsUserInput!): RemoveFromUserInvitationsPayload
  removeFromUserProjects(input: RemoveFromUserProjectsUserInput!): RemoveFromUserProjectsPayload
  removeFromUserRequests(input: RemoveFromUserRequestsUserInput!): RemoveFromUserRequestsPayload
  signinUser(input: SigninUserInput!): SigninPayload!
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Project implements Node {
  artwork(filter: FileFilter): File
  createdAt: DateTime
  creator(filter: UserFilter): User
  description: String
  genre: [PROJECT_GENRE!]
  id: ID!
  new: Boolean!
  privacy: PROJECT_PRIVACY!
  title: String!
  updatedAt: DateTime
}

enum PROJECT_GENRE {
  ROCK
  JAZZ
}

enum PROJECT_PRIVACY {
  PUBLIC
  PRIVATE
  TRIBE
}

input ProjectartworkFile {
  name: String!
}

# A connection to a list of items.
type ProjectConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProjectEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

input ProjectcreatorUser {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
}

# An edge in a connection.
type ProjectEdge {
  # The item at the end of the edge.
  node: Project!

  # A cursor for use in pagination.
  cursor: String!
}

input ProjectFilter {
  AND: [ProjectFilter!]
  OR: [ProjectFilter!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  genre: [PROJECT_GENRE!]
  genre_not: [PROJECT_GENRE!]
  genre_in: [[PROJECT_GENRE!]!]
  genre_not_in: [[PROJECT_GENRE!]!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  new: Boolean
  new_not: Boolean
  privacy: PROJECT_PRIVACY
  privacy_not: PROJECT_PRIVACY
  privacy_in: [PROJECT_PRIVACY!]
  privacy_not_in: [PROJECT_PRIVACY!]
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
}

input ProjectInput {
  description: String
  genre: [PROJECT_GENRE!]
  new: Boolean
  privacy: PROJECT_PRIVACY
  title: String!
  artworkId: ID
  creatorId: ID
}

enum ProjectOrderBy {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  new_ASC
  new_DESC
  privacy_ASC
  privacy_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

input RemoveFromArtistInfluenceInfluenceInput {
  artistArtistId: ID!
  influencesInfluenceId: ID!
  clientMutationId: String!
}

type RemoveFromArtistInfluencePayload {
  viewer: Viewer!
  clientMutationId: String!
  influencesInfluence: Influence
  artistArtist: Artist
  influencesInfluenceEdge: InfluenceEdge
  artistArtistEdge: ArtistEdge
}

type RemoveFromFriendsPayload {
  viewer: Viewer!
  clientMutationId: String!
  friends2User: User
  friends1User: User
  friends2UserEdge: UserEdge
  friends1UserEdge: UserEdge
}

input RemoveFromFriendsUserInput {
  friends1UserId: ID!
  friends2UserId: ID!
  clientMutationId: String!
}

type RemoveFromUserInfluencesPayload {
  viewer: Viewer!
  clientMutationId: String!
  userUser: User
  influencesInfluence: Influence
  userUserEdge: UserEdge
  influencesInfluenceEdge: InfluenceEdge
}

input RemoveFromUserInfluencesUserInput {
  influencesInfluenceId: ID!
  userUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserInvitationsPayload {
  viewer: Viewer!
  clientMutationId: String!
  recipientUser: User
  invitationsFriendRequest: FriendRequest
  recipientUserEdge: UserEdge
  invitationsFriendRequestEdge: FriendRequestEdge
}

input RemoveFromUserInvitationsUserInput {
  invitationsFriendRequestId: ID!
  recipientUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserProjectsPayload {
  viewer: Viewer!
  clientMutationId: String!
  creatorUser: User
  projectsProject: Project
  creatorUserEdge: UserEdge
  projectsProjectEdge: ProjectEdge
}

input RemoveFromUserProjectsUserInput {
  projectsProjectId: ID!
  creatorUserId: ID!
  clientMutationId: String!
}

type RemoveFromUserRequestsPayload {
  viewer: Viewer!
  clientMutationId: String!
  actorUser: User
  sentrequestsFriendRequest: FriendRequest
  actorUserEdge: UserEdge
  sentrequestsFriendRequestEdge: FriendRequestEdge
}

input RemoveFromUserRequestsUserInput {
  sentrequestsFriendRequestId: ID!
  actorUserId: ID!
  clientMutationId: String!
}

type SetProjectArtPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectProject: Project
  artworkFile: File
  projectProjectEdge: ProjectEdge
  artworkFileEdge: FileEdge
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type SigninPayload {
  token: String
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input SigninUserInput {
  auth0: AUTH_PROVIDER_AUTH0
  clientMutationId: String!
}

input SignupUserInput {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
  clientMutationId: String!
  authProvider: AuthProviderSignupData!
}

type UnsetProjectArtPayload {
  viewer: Viewer!
  clientMutationId: String!
  projectProject: Project
  artworkFile: File
  projectProjectEdge: ProjectEdge
  artworkFileEdge: FileEdge
}

input UnsetProjectArtProjectInput {
  artworkFileId: ID!
  projectProjectId: ID!
  clientMutationId: String!
}

input UpdateArtistInput {
  id: ID!
  imageUrl: String
  name: String
  spotifyId: String
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  clientMutationId: String!
}

type UpdateArtistPayload {
  viewer: Viewer!
  clientMutationId: String!
  artist: Artist
  edge: ArtistEdge
}

input UpdateFileInput {
  id: ID!
  name: String
  projectId: ID
  project: FileprojectProject
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  project: Project
}

input UpdateFriendRequestInput {
  accepted: Boolean
  id: ID!
  ignored: Boolean
  actorId: ID
  actor: FriendRequestactorUser
  recipientId: ID
  recipient: FriendRequestrecipientUser
  clientMutationId: String!
}

type UpdateFriendRequestPayload {
  viewer: Viewer!
  clientMutationId: String!
  friendRequest: FriendRequest
  edge: FriendRequestEdge
  actor: User
  recipient: User
}

input UpdateInfluenceInput {
  id: ID!
  artistId: ID
  artist: InfluenceartistArtist
  userId: ID
  user: InfluenceuserUser
  clientMutationId: String!
}

type UpdateInfluencePayload {
  viewer: Viewer!
  clientMutationId: String!
  influence: Influence
  edge: InfluenceEdge
  artist: Artist
  user: User
}

input UpdateProjectInput {
  description: String
  genre: [PROJECT_GENRE!]
  id: ID!
  new: Boolean
  privacy: PROJECT_PRIVACY
  title: String
  artworkId: ID
  artwork: ProjectartworkFile
  creatorId: ID
  creator: ProjectcreatorUser
  clientMutationId: String!
}

type UpdateProjectPayload {
  viewer: Viewer!
  clientMutationId: String!
  project: Project
  edge: ProjectEdge
  artwork: File
  creator: User
}

input UpdateUserInput {
  email: String
  experience: USER_EXPERIENCE
  handle: String
  id: ID!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  auth0UserId: String
  createdAt: DateTime
  email: String!
  experience: USER_EXPERIENCE
  friends(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection
  handle: String!
  id: ID!
  influences(filter: InfluenceFilter, orderBy: InfluenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): InfluenceConnection
  invitations(filter: FriendRequestFilter, orderBy: FriendRequestOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  projects(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection
  sentrequests(filter: FriendRequestFilter, orderBy: FriendRequestOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection
  summary: String
  updatedAt: DateTime
  website: String
}

enum USER_EXPERIENCE {
  NOVICE
  PROFESSIONAL
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  auth0UserId: String
  auth0UserId_not: String
  auth0UserId_in: [String!]
  auth0UserId_not_in: [String!]
  auth0UserId_lt: String
  auth0UserId_lte: String
  auth0UserId_gt: String
  auth0UserId_gte: String
  auth0UserId_contains: String
  auth0UserId_not_contains: String
  auth0UserId_starts_with: String
  auth0UserId_not_starts_with: String
  auth0UserId_ends_with: String
  auth0UserId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  experience: USER_EXPERIENCE
  experience_not: USER_EXPERIENCE
  experience_in: [USER_EXPERIENCE!]
  experience_not_in: [USER_EXPERIENCE!]
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_lt: String
  handle_lte: String
  handle_gt: String
  handle_gte: String
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  latitude: BigDecimal
  latitude_not: BigDecimal
  latitude_in: [BigDecimal!]
  latitude_not_in: [BigDecimal!]
  latitude_lt: BigDecimal
  latitude_lte: BigDecimal
  latitude_gt: BigDecimal
  latitude_gte: BigDecimal
  longitude: BigDecimal
  longitude_not: BigDecimal
  longitude_in: [BigDecimal!]
  longitude_not_in: [BigDecimal!]
  longitude_lt: BigDecimal
  longitude_lte: BigDecimal
  longitude_gt: BigDecimal
  longitude_gte: BigDecimal
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  placename: String
  placename_not: String
  placename_in: [String!]
  placename_not_in: [String!]
  placename_lt: String
  placename_lte: String
  placename_gt: String
  placename_gte: String
  placename_contains: String
  placename_not_contains: String
  placename_starts_with: String
  placename_not_starts_with: String
  placename_ends_with: String
  placename_not_ends_with: String
  profilePicThumb: String
  profilePicThumb_not: String
  profilePicThumb_in: [String!]
  profilePicThumb_not_in: [String!]
  profilePicThumb_lt: String
  profilePicThumb_lte: String
  profilePicThumb_gt: String
  profilePicThumb_gte: String
  profilePicThumb_contains: String
  profilePicThumb_not_contains: String
  profilePicThumb_starts_with: String
  profilePicThumb_not_starts_with: String
  profilePicThumb_ends_with: String
  profilePicThumb_not_ends_with: String
  profilePicUrl: String
  profilePicUrl_not: String
  profilePicUrl_in: [String!]
  profilePicUrl_not_in: [String!]
  profilePicUrl_lt: String
  profilePicUrl_lte: String
  profilePicUrl_gt: String
  profilePicUrl_gte: String
  profilePicUrl_contains: String
  profilePicUrl_not_contains: String
  profilePicUrl_starts_with: String
  profilePicUrl_not_starts_with: String
  profilePicUrl_ends_with: String
  profilePicUrl_not_ends_with: String
  summary: String
  summary_not: String
  summary_in: [String!]
  summary_not_in: [String!]
  summary_lt: String
  summary_lte: String
  summary_gt: String
  summary_gte: String
  summary_contains: String
  summary_not_contains: String
  summary_starts_with: String
  summary_not_starts_with: String
  summary_ends_with: String
  summary_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
}

input UserInput {
  email: String!
  experience: USER_EXPERIENCE
  handle: String!
  latitude: BigDecimal
  longitude: BigDecimal
  name: String
  placename: String
  profilePicThumb: String
  profilePicUrl: String
  summary: String
  website: String
  friendsIds: [ID!]
  friends: [UserInput!]
  influencesIds: [ID!]
  influences: [InfluenceInput!]
  invitationsIds: [ID!]
  invitations: [FriendRequestInput!]
  projectsIds: [ID!]
  projects: [ProjectInput!]
  sentrequestsIds: [ID!]
  sentrequests: [FriendRequestInput!]
}

enum UserOrderBy {
  auth0UserId_ASC
  auth0UserId_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  experience_ASC
  experience_DESC
  handle_ASC
  handle_DESC
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  name_ASC
  name_DESC
  placename_ASC
  placename_DESC
  profilePicThumb_ASC
  profilePicThumb_DESC
  profilePicUrl_ASC
  profilePicUrl_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
  website_ASC
  website_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allProjects(filter: ProjectFilter, orderBy: ProjectOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  allInfluences(filter: InfluenceFilter, orderBy: InfluenceOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): InfluenceConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  allFriendRequests(filter: FriendRequestFilter, orderBy: FriendRequestOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  allArtists(filter: ArtistFilter, orderBy: ArtistOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): ArtistConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  Project(id: ID): Project
  Influence(id: ID): Influence
  User(auth0UserId: String, email: String, handle: String, id: ID): User
  FriendRequest(id: ID): FriendRequest
  Artist(id: ID): Artist
  File(id: ID, secret: String, url: String): File
  id: ID!
  user: User
}
