schema {
  query: RootQuery
  mutation: RootMutation
}

# An edge in a connection.
type createPersonEdge {
  # The item at the end of the edge
  node: Person

  # A cursor for use in pagination
  cursor: String!
}

input CreatePersonInput {
  email: String!
  password: String
  clientMutationId: String
}

type CreatePersonPayload {
  newPersonEdge: createPersonEdge
  clientMutationId: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Person implements Node {
  # The ID of an object
  id: ID!
  personID: ID
  email: String
  name: String
  handle: String
  traits(after: String, first: Int, before: String, last: Int): PersonTraitConnection
}

# A connection to a list of items.
type PersonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PersonEdge]
}

# An edge in a connection.
type PersonEdge {
  # The item at the end of the edge
  node: Person

  # A cursor for use in pagination
  cursor: String!
}

type PersonTrait implements Node {
  # The ID of an object
  id: ID!
  personID: ID
  traitKeyID: ID
  traitValueID: ID
  key: String
  value: String
}

# A connection to a list of items.
type PersonTraitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PersonTraitEdge]
}

# An edge in a connection.
type PersonTraitEdge {
  # The item at the end of the edge
  node: PersonTrait

  # A cursor for use in pagination
  cursor: String!
}

# The root mutation
type RootMutation {
  createPerson(input: CreatePersonInput!): CreatePersonPayload
}

# The root query
type RootQuery {
  # The person who is currently using the site.
  viewer(personID: ID): Viewer
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  personID: ID
  email: String
  name: String

  # The person who is currently using the site.
  self(after: String, first: Int, before: String, last: Int): PersonConnection

  # A person who has an account with the site.
  persons(after: String, first: Int, before: String, last: Int): PersonConnection
}
