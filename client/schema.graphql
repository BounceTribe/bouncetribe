schema {
  query: RootQuery
  mutation: RootMutation
}

# An edge in a connection.
type createPersonEdge {
  # The item at the end of the edge
  node: Person

  # A cursor for use in pagination
  cursor: String!
}

input CreatePersonInput {
  email: String!
  password: String
  clientMutationId: String
}

type CreatePersonPayload {
  newPersonEdge: createPersonEdge
  clientMutationId: String
}

input EditPersonInput {
  personID: ID
  handle: String
  clientMutationId: String
}

type EditPersonPayload {
  person: Person
  viewer: Viewer
  clientMutationId: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Person implements Node {
  # The ID of an object
  id: ID!
  personID: ID
  profilePicUrl: String
  email: String
  name: String
  handle: String
  influences: [String]
}

# The root mutation
type RootMutation {
  createPerson(input: CreatePersonInput!): CreatePersonPayload
  editPerson(input: EditPersonInput!): EditPersonPayload
}

# The root query
type RootQuery {
  # The person who is currently using the site.
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  personID: ID
  email: String
  name: String

  # The person who is currently using the site.
  self: Person
}
